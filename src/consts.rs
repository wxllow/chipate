// Constants for chip8 emu
use lazy_static::lazy_static;

use crate::keymaps::Keymap;

pub const WIDTH: usize = 64;
pub const HEIGHT: usize = 32;
pub const SCALE_FACTOR: u32 = 10;
pub const FONT: [u8; 240] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xe0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0x80, // C
    0xF0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
    // Super CHIP fonts
    0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, // 0
    0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, // 1
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // 2
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 3
    0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, // 4
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 5
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 6
    0xFF, 0xFF, 0x03, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, // 7
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 8
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 9
    0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFf, 0xC3, 0xC3, 0xC3, // A
    0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, // B
    0x3C, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xFF, 0x3C, // C
    0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, // D
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // E
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, // F
];

lazy_static! {
    pub static ref STANDARD_KEYMAP: [Keymap; 16] = [
        Keymap {
            scancode: 30,
            key: 0x01,
            comments: Some("Num1 ->  1".to_string()),
        },
        Keymap {
            scancode: 31,
            key: 0x02,
            comments: Some("Num2 ->  2".to_string()),
        },
        Keymap {
            scancode: 32,
            key: 0x03,
            comments: Some("Num3 ->  3".to_string()),
        },
        Keymap {
            scancode: 33,
            key: 0x0C,
            comments: Some("Num4 -> C".to_string()),
        },
        Keymap {
            scancode: 20,
            key: 0x04,
            comments: Some("Q ->  3".to_string()),
        },
        Keymap {
            scancode: 26,
            key: 0x05,
            comments: Some("W ->  5".to_string()),
        },
        Keymap {
            scancode: 8,
            key: 0x06,
            comments: Some("E ->  6".to_string()),
        },
        Keymap {
            scancode: 21,
            key: 0x0D,
            comments: Some("R -> D".to_string()),
        },
        Keymap {
            scancode: 4,
            key: 0x07,
            comments: Some("A ->  7".to_string()),
        },
        Keymap {
            scancode: 22,
            key: 0x08,
            comments: Some("S ->  8".to_string()),
        },
        Keymap {
            scancode: 7,
            key: 0x09,
            comments: Some("D ->  9".to_string()),
        },
        Keymap {
            scancode: 9,
            key: 0x0E,
            comments: Some("F -> E".to_string()),
        },
        Keymap {
            scancode: 29,
            key: 0x0A,
            comments: Some("Z -> A".to_string()),
        },
        Keymap {
            scancode: 27,
            key: 0x00,
            comments: Some("X ->  0".to_string()),
        },
        Keymap {
            scancode: 6,
            key: 0x0B,
            comments: Some("C -> B".to_string()),
        },
        Keymap {
            scancode: 25,
            key: 0x0F,
            comments: Some("V -> F".to_string()),
        },
    ];
}
